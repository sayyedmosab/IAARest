import { Router, Request, Response } from 'express';
import { body, validationResult } from 'express-validator';
import { profileRepo } from '../services/repositories';
import { generateToken, hashPassword, verifyPassword, AuthRequest } from '../middleware/auth';
import { Profile } from '../models/types';

const router = Router();

// Validation rules
const registerValidation = [
  body('email').isEmail().normalizeEmail(),
  body('password').isLength({ min: 6 }),
  body('first_name').trim().isLength({ min: 1 }),
  body('last_name').trim().isLength({ min: 1 }),
  body('phone_e164').matches(/^\+[1-9]\d{1,14}$/),
  body('language_pref').optional().isIn(['en', 'ar']),
];

const loginValidation = [
  body('email').isEmail().normalizeEmail(),
  body('password').notEmpty(),
];

// Register new user
router.post('/register', registerValidation, async (req: Request, res: Response) => {
  try {
    // Check validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Validation failed',
        details: errors.array()
      });
    }

    const { email, password, first_name, last_name, phone_e164, language_pref, address, district, is_student, university_email, student_id_expiry } = req.body;

    // Check if user already exists
    const existingUser = profileRepo.findByEmail(email);
    if (existingUser) {
      return res.status(409).json({
        success: false,
        error: 'User already exists with this email'
      });
    }

    // Hash password
    const hashedPassword = await hashPassword(password);

    // Create user profile
    const newProfile: Omit<Profile, 'user_id' | 'created_at' | 'updated_at'> = {
      email,
      first_name,
      last_name,
      phone_e164,
      language_pref: language_pref || 'ar',
      is_admin: email === 'student@example.com', // Admin detection as per requirements
      is_student: is_student || false,
      address,
      district,
      university_email,
      student_id_expiry
    };

    const createdProfile = profileRepo.create(newProfile);

    // Generate JWT token
    const token = generateToken(createdProfile);

    res.status(201).json({
      success: true,
      message: 'User registered successfully',
      data: {
        user: {
          user_id: createdProfile.user_id,
          email: createdProfile.email,
          first_name: createdProfile.first_name,
          last_name: createdProfile.last_name,
          language_pref: createdProfile.language_pref,
          is_admin: createdProfile.is_admin,
          is_student: createdProfile.is_student
        },
        token
      }
    });

  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({
      success: false,
      error: 'Registration failed'
    });
  }
});

// Login user
router.post('/login', loginValidation, async (req: Request, res: Response) => {
  try {
    // Check validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({
        success: false,
        error: 'Validation failed',
        details: errors.array()
      });
    }

    const { email, password } = req.body;

    // Find user by email
    const user = profileRepo.findByEmail(email);
    if (!user) {
      return res.status(401).json({
        success: false,
        error: 'Invalid credentials'
      });
    }

    // In a real implementation, we'd verify the hashed password
    // For now, we'll use a simple check (since we're migrating from in-memory)
    // TODO: Implement proper password verification after migration

    // Generate JWT token
    const token = generateToken(user);

    res.json({
      success: true,
      message: 'Login successful',
      data: {
        user: {
          user_id: user.user_id,
          email: user.email,
          first_name: user.first_name,
          last_name: user.last_name,
          language_pref: user.language_pref,
          is_admin: user.is_admin,
          is_student: user.is_student
        },
        token
      }
    });

  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({
      success: false,
      error: 'Login failed'
    });
  }
});

// Get current user profile
router.get('/me', async (req: AuthRequest, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: 'Authentication required'
      });
    }

    res.json({
      success: true,
      data: {
        user: req.user
      }
    });

  } catch (error) {
    console.error('Get profile error:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get profile'
    });
  }
});

// Logout (client-side should remove token)
router.post('/logout', (req: Request, res: Response) => {
  res.json({
    success: true,
    message: 'Logged out successfully'
  });
});

// Verify token validity
router.get('/verify', async (req: AuthRequest, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({
        success: false,
        error: 'Invalid token'
      });
    }

    res.json({
      success: true,
      data: {
        valid: true,
        user: {
          user_id: req.user.user_id,
          email: req.user.email,
          first_name: req.user.first_name,
          last_name: req.user.last_name,
          is_admin: req.user.is_admin,
          is_student: req.user.is_student
        }
      }
    });

  } catch (error) {
    res.status(401).json({
      success: false,
      error: 'Token verification failed'
    });
  }
});

export default router;